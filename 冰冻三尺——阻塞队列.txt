	阻塞队列(BlockingQueue)是一个支持两个附加操作的队列。这两个附加的操作支持阻塞的插入和移除方法。
	1.阻塞的插入方法：当队列满时，队列会阻塞插入元素的线程，直到队列不满。
	2.阻塞的移除方法：在队列为空时，获取元素的线程会等待队列变为非空。

	阻塞队列插入和移除操作的4种处理方式
	方法/处理方式		抛出异常		返回特殊值		  一直阻塞		  超时退出
		插入方法		  add(e)		  offer(e)			put(e)			offer(e, time, unit)
		移除方法		  remove()		  poll()			take()			poll(time,unit)
		检查方法		  element()		  peek()			不可用			不可用


	阻塞队列常用于生产者和消费者的场景，生产者时向队列里添加原色的线程，消费者是从队列里取元素的线程。阻塞队列就是
生产者用来存放元素，消费者用来获取元素的容器。

	JDK7提供了7个阻塞队列：
	1.ArrayBlockingQueue：一个由数组结构组成的有界阻塞队列。
	2.LinkedBlockingQueue：一个由链表结构组成的有界阻塞队列。
	3.PriorityBlockingQueue：一个支持优先级排序的无界阻塞队列。
	4.DelayQueue：一个使用优先级队列实现的无界阻塞队列。
	5.SynchronousQueue：一个不存储元素的阻塞队列。
	6.LinkedTransferQueue：一个由链表结构组成的无界阻塞队列。
	7.LinkedBlockingQueue：一个由链表结构组成的双向阻塞队列。

	1.ArrayBlockingQueue队列一般是非公平队列，如果要建立公平队列，创建队列时，要注意使用正确的构造方法。

	2.LinkedBlockingQueue队列时一个用链表实现的有界阻塞队列。此队列的默认和最大长度为Integer.MAX_VALUE。

	DelayQueue是一个支持演示获取元素的无界阻塞队列。队列使用PriorityQueue来实现。队列中的元素必须实现Delay接口，
在创建元素时可以指定多久才能从队列中获取当前元素。只有在延时期满时，才能从队列中提取元素。
	DelayQueue非常有用，可以将DelayQueue运用在以下的应用场景。
	1.缓存系统的设计：可以用DelayQueue板寸缓存元素的有效期，使用一个线程循环查询DelayQueue，一旦能从DelayQueue中
获取元素时，表示缓存有效期到了。
	2.定时任务调度：使用DelayQueue保存当天将会执行的任务和执行时间，一旦从DelayQueue中获取到任务就开始执行，比如
TimerQueue就是使用DelayQueue实现的。
	