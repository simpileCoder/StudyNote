基础概念：http://blog.csdn.net/whycold/article/details/41119807

	1.RabbitMQ是AMQP(Advanced Message Queuing Protocol)高级消息队列协议，的一个开源实现。
支持多种语言的客户端，支持ajax。用于分布式系统中存储转发消息，在易用性，扩展性，高可用性
等方面表现不俗。

	2.ConnectionFactory、Connection、Channel
	ConnectionFactory、Connection、Channel都是RabbitMQ对外提供API中最基本的对象。
Connection是RabbitMQ的socket链接，它封装了socket协议相关部分逻辑。ConnectionFactory是
Connection的制造工厂。Channel是我们与RabbitMQ打交道的最重要的一个接口，我们大部分的业
务操作是在Channel这个接口中完成的，包括定义Queue、定义Exchange、绑定Queue与Exchange、
发布消息等。

	3.Queue
	Queue(队列)是RabbitMQ的内部对象，用于存储消息， RabbitMQ的消息都只能存储在Queue中，
生产者产生的消息投递到Queue中，消费者可以从Queue中获取消息并消费。
	多个消费者可以订阅同一个Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，
而不是每个消费者都收到所有的消息并处理。
	在实际应用中，可能会发生消费者收到Queue中的消息，但没有处理完成就宕机(或出现其他意
外)的情况，这种情况下就可能会导致消息丢失。为了避免这种情况发生，我们可以要求消费者在
消费完消息后发送一个回执给RabbitMQ，RabbitMQ收到消息回执(Message acknowledgment)后才将
消息从Queue中移除；如果RabbitMQ没有收到回执并检测到消费者的RabbitMQ链接断开，则RabbitMQ
会将该消息发送给其他消费者(如果存在多个消费者)进行处理。这里不存在timeout的概念，一个
消费者处理消息时间再长也不会导致该消息被发送给其他消费者，除非它的RabbitMQ链接断开。
	如果开发人员在处理完业务逻辑之后，忘记发送回执给RabbitMQ，这将会导致严重的bug，Queue
中的消息会越来越多；消费者重启后会重复消费这些消息并重复执行业务逻辑。

	4.Message durability
	如果我们希望即使在RabbitMQ服务重启的情况下，也不会丢失消息，我们可以将Queue与Message
都设置为可持久化的(durable)，这样可以保证绝大部分情况下我们的RabbitMQ消息不会丢失。但依然
解决不了小概率丢失时间的发生(比如RabbitMQ服务器已经接收到生产者的消息，但还没来得及持久化
该消息时RabbitMQ服务器就断电了)，如果我们需要对这种小概率事件也要管理起来，那么我们要用到
RabbitMQ的事务。

	5.Prefetch count
	多个消费者同时订阅同一个Queue中的消息，Queue中的消息会被平摊给多个消费者。这时如果每个
消息的处理时间不同，就可能导致某些消费者一直在忙，而另外一些消费者很快就处理完手头工作并一
直空闲的情况。我们可以通过设置prefetch count来限制Queue每次发送给每个消费者的消息数，比如
我们设置prefetchCount=1,则Queue每次给每个消费者发送一条消息；消费者处理完这条消息后Queue会
再给该消费者发送一条消息。

	6.Exchange
	前面我们描述生产者将消息投递到Queue中，实际上这在RabbitMQ中永远都不会发生。实际情况是，
生产者将消息发送到Exchange(交换器，路由)，由Exchange将消息路由到一个或多个Queue中(或者丢弃)
有四种类型的Exchange。

	7.routing key
	生产者在将消息发送给Exchange的时候，一般会指定一个routing key，来指定这个消息的路由规
则，而这个routing key需要与Exchange Type及binding key联合使用才能最终生效。在Exchange Type
与binding key固定的情况下(在正常使用时一般这些内容都是固定配置好的)，我们的生产者就可以在
发送消息给Exchange时，通过指定routing key来决定消息流向哪里。

	8.Binding
	RabbitMQ中通过Binding将Exchange与Queue关联起来，这样RabbitMQ就知道如何正确地将消息路由
到指定的Queue了。

	9.Binding key
	在绑定(Binding)Exchange与Queue的同时，一般会指定一个binding key;消费者将消息发送给
Exchange时，一般会指定一个routing key;当binding key相匹配时，消息将会被路由到对应的Queue中。
这个将在Exchange Type章节会列举实际的例子加以说明。
	在绑定多个Queue到同一个Exchange的时候，这些Binding允许使用相同的binding key.
	binding key并不是在所有情况下都生效，它依赖于Exchange Type，比如fanout类型的Exchange
就会无视binding key，而是将消息路由到所有绑定到该Exchange的Queue。

	10.Exchange Types
	RabbitMQ常用的Exchange Type有fanout、direct、topic、headers这四种。
	1.fanout(展开)
	fanout类型的Exchange路由规则非常简单，它会把所有发送到该Exchange的消息路由到所有与它
绑定的Queue中。
	2.direct(指挥)
	direct类型的Exchange路由规则也很简单，它会把消息路由到那些binding key与routing key完全
匹配的Queue中。
	3.topic
	direct类型的Exchange路由规则是完全匹配binding key和routing key，但这种严格的匹配方式在
很多情况下不能满足实际业务需求。topic类型的Exchange在匹配规则上进行了扩展，它与direct类型的
Exchange相似，也是将消息路由到binding key与routing key相匹配的Queue中，但这里的匹配规则有些
不同，它约定：
	routing key 为一个句点号"."分隔的字符串(我们将被句点号"."分隔开的每一段独立的字符串称为
一个单词，如："stock.usd.nyse"、"nyse.vmw"、"quick.orange.rabbit")。
	binding key与routing key一样也是句点号"."分隔的字符串。
	binding key中可以存在两种特殊字符"*"与"#",用于做模糊匹配，其中"*"用于匹配一个单词，"#"
用于匹配多个单词(可以是零个)。

	headers
	headers类型的Exchange不依赖于routing key与binding key的匹配规则来路由消息，而是根据发送
的消息内容中的headers属性进行匹配。
	在绑定Queue与Exchange时指定一组键值对;当消息发送到Exchange时，RabbitMQ会取到该消息的
headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配Queue与Exchange绑定时指定的键值
对;如果完全匹配则消息会路由到该Queue，否则不会路由到该Queue。
