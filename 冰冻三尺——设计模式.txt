创建型模式：单例模式，工厂模式，抽象工厂模式，建造者模式，原型模式。
结构型模式：适配器模式，桥接模式，装饰模式，组合模式，外观模式，享元模式，代理模式。
行为型模式：模板方法模式，命令模式，迭代器模式，观察者模式，中介者模式，备忘录模式，
解释器模式，状态模式，策略模式，责任链模式，访问者模式。


1.单例模式：
	饿汉式：线程安全，调用效率高。不能延时加载。
	懒汉式(加synchronize关键字)：线程安全，调用效率不高，可以延时加载。
	双重检测所式。
	静态内部类式：真正调用getInstance()的时候才会加载静态内部类。加载时是线程安全的。
	枚举单例：线程安全，调用效率高，但不能延时加载。

2.工厂模式：
	1.实现了创建者和调用者的分离。
	简单工厂模式：用来生产同一等级结构中的任意产品。(对于增加新的产品，需要修改已有代码)。
	工厂方法模式：用来生产同一等级的单一种类产品。
	抽象工厂模式：生产不同产品族的全部产品。

3.建造者模式：

4.原型模式：prototype，也称拷贝模式。
当通过new来产生一个对象非常复杂时。使用原型模式会节省时间.
注意Java中只有8种基本数据类型和它们的封装类型以及String是深拷贝，其余都是浅拷贝。
可以深度克隆，也可以通过序列化和反序列化克隆。

5.代理模式：通过代理，控制对对象的访问！
可以详细控制访问某个(某类)对象的方法，在调用这个方法前做前置处理，调用这个方法后
做后置处理。(即：AOP的微观实现！)
代理模式中的角色：
	抽象角色：定义代理角色和真实角色的公共对外方法。
	真实角色：实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。
	代理角色：实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现
	抽象方法，并可以附加自己的操作。
	将统一的流程控制放到代理角色中处理！
应用场景：
	安全代理：屏蔽对真实角色的直接访问。
	远程代理：通过代理类处理远程方法调用(RMI)
	延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象。
动态代理：
	JDK自带的动态代理
	javaassist字节码操作库实现
	CGLIB
	ASM

6.桥接模式：
	商城系统中常见的商品分类，以电脑为例，如何良好的处理多级的 商品分类销售的问题。
	商城系统中有两个变化的维度：电脑类型，电脑品牌。使用桥接模式。用一个类，将这两个
维度连接起来，可以避免增加电脑类型或者电脑品牌的复杂过程。
	
	应用场景：
	JDBC驱动;
	AWT中的Peer架构;
	银行日志管理:
		格式分类：操作日志，交易日志，异常日志。
		距离分类：本地记录日志，异地记录日志。
	人力资源系统中的奖金计算模块:
		奖金分类：个人奖金，团体奖金，激励奖金。
		部门分类：人事部门，销售部门，研发部门。
	OA系统中的消息处理：
		业务类型：普通消息，加急消息，特急消息。
		发送消息方式：系统内消息，手机短信，邮件。

7.组合模式：
	应用场景：主要用于处理树形结构，把部分和整体的关系用树形结构来表示，从而使客户端可以使用
同一的方式处理部分对象和整体对象。
	抽象构件角色：定义了叶子和容器构件的共同点。
	叶子构件角色：无子节点。
	容器构件角色：有容器特征，可以包含子节点。
	组合模式为处理树形结构提供了完美的解决方案，描述了如何将容器和叶子进行递归组合，使得用户
在使用时可以一致性的对待容器和叶子。
	当容器对象的指定方法被调用时，将遍历整个树形结构，寻找也包含这个方法的成员，并调用执行。
其中，使用了递归调用的机制对整个结构进行处理。

8.装饰模式(decorator):
	动态的为一个对象增加新的功能。
	装饰模式是一种用于代替继承的技术，无须通过继承增加子类就能扩展对象的新功能。使用对象的
关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀。

9.门面(外观)模式(facade):
	迪米特法则：一个软件实体应当尽可能少的与其他实体发生相互作用。
	门面模式核心：为子系统提供统一的入口。封装子系统的复杂性，便于客户端调用。

10.享元模式(FlyWeight)：
	应用场景：内存属于稀缺资源，不要随便浪费。如果有很多个完全相同或相似的对象，我们可以通过
享元模式，节省内存。
	核心思想：享元模式以共享的方式高效地支持大量细粒度对象的重用。
	享元对象能做到共享的关键是区分了内部状态和外部状态。
	内部状态：可以共享，不随环境变化而改变。
	外部状态：不可用共享，会随环境变化而改变。
	例：围棋软件开发，棋子只分黑白其它没有区别，它们的颜色，形状，大小是可以共享的，称之为：
内部状态。但是棋子在棋盘上的位置是不可用共享的，称之为：外部状态。

享元模式实现：
	FlyweightFactory享元工厂类：创建并管理享元对象，享元池一般设计成键值对。
	FlyWeight抽象享元类：通常是一个接口或抽象类，声明公共方法，这些方法可以向外界提供对象的内
部状态，设置外部状态。
	ConcreteFlyWeight具体享元类：为内部状态提供成员变量进行存储。
	UnsharedConcreteFlyWeight非共享享元类：不能被共享的子类可以设计为非共享享元类。



11.责任链模式：
	将能够处理同一类请求的对象连成一条链，所提交的请求沿着链传递，链上的对象逐个判断是否有
能力处理该请求，如果能则处理，不能则传递给链上的下一个对象。
	应用场景:打牌时，轮流出牌；接力赛跑；大学中，奖学金审批； 公司中，公文审批。


12.迭代器模式：
	场景：提供一种可以遍历聚合对象的方式。又称为：游标模式
	聚合对象：存储数据
	迭代器：遍历数据

13.中介者模式：
	应用场景：
	如果没有总经理  下面三个部门：财务部，市场部，研发部。财务部需要发工资，让大家
核对公司需要跟市场部和研发部都通气；市场部要接个新项目，需要研发部处理技术，需要财务部出资金。
市场部要跟各个部门打交道。虽然只有三个部门，但是关系非常乱。
	实际上，公司都有总经理。各个部门有什么事情都通报到总经理这里，总经理再通知各个相关部门。
	这就是一个典型的"中介者模式"，总经理起到一个中介，协调的作用。
	核心思想：
	如果一个系统中对象之间的联系呈现为网状结构，对象之间存在大量多对多关系，将导致
关系及其复杂，这些对象称为"同事对象"。
	我们可以引入一个中介者对象，使各个同事对象只跟中介者对象打交道，将复杂的网络结构化解为拓
扑结构。
	本质：
	解耦多个同事对象之间的交互关系。每个对象都持有中介者对象的引用，只跟中介者对象打交道。我们
通过中介者对象统一管理这些交互关系。
	开发中常见的场景：
	MVC模式中的C，控制器。
	窗口游戏程序，窗口软件开发中的窗口对象。
	Java.lang.reflect.Method#invoke()。

14.命令模式：
	将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求
日志，以及支持可撤销的操作。也称之为：动作Action模式，事务transaction模式。

15.解释器模式：
	用于描述如何构成一个简单的语言解释器，主要用于使用面向对象语言开发的编译器和解释器设计。
	当我们需要开发一种新的语言时，可以考虑使用解释器模式。
	尽量不要使用解释器模式，后期维护会有很大麻烦。在项目中，可以使用Jruby，Groovy，java的js引
擎来替代解释器的作用，弥补Java语言的不足。

16.访问者模式：
	模式动机：
	对于存储在一个集合中的对象，他们可能具有不同的类型(即使有一个公共的接口)，对于该集合中的
对象来访问，不同的访问者其访问方式也有所不同。
	定义：
	表示一个作用于某对象结构中的各元素的操作，它使我们可以在不改变各元素的类的前提下定义作用于
这些元素的新的操作。

17.策略模式(strategy)：
	应用场景：
	某个市场人员接到单后的报价策略(CRM系统中常见问题)。报价策略很复杂，可以简单作如下分类：
	1.普通客户小批量报价；
	2.普通客户大批量报价；
	3.老客户小批量报价；
	4.老客户大批量报价。
	具体选用哪个报价策略，这需要根据实际情况来确定。这时候，我们采用策略模式即可。

18.模板方法模式(template method):
	应用场景：一套固定的流程中，有一个或几个方法不知道具体实现，用抽象实现来代替。留给子类实现
具体的流程。
	实现方法：先定义一个模板抽象类，里面还有一个final的模板方法。模板方法中包含一套固定的流程
但是流程中有若干抽象的方法，留待子类来实现。

19.状态模式(state):
	状态模式：不同的状态对应不同场景的时候。
	应用场景：
	红绿灯，不同颜色对应不同的状态。
	网上购物的时候，订单的状态。下单，已付款，已发货，送货中......
	核心：
	用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题。
	结构：
	Context环境类：环境类中维护一个State对象，他定义了当前的状态。
	State抽象状态类。
	ConcreteState具体状态类：每一个类封装了一个状态对应的行为。

20.观察者模式(observer):
	应用场景：手机app订阅短信。
	观察者模式主要用于1：N的通知。当一个对象(目标对象Subject或Objservable)的状态变化时，他需要
及时告知一系列对象(观察者Observer)，令他们做出响应。
	通知观察者的方式：
	推：每次都会把通知以广播方式发生给所有观察者，所有观察者只能被动接收。
	拉：观察者只要知道有情况即可。至于什么时候获取内容，获取什么内容，都可以自主决定。

21.备忘录模式(memento)：
	应用场景：
	录入大批人员资料。正在录入当前人资料时，发现上一个人录错了，此时需要恢复上一个人的资料，再
进行修改。
	Word文档编辑时，忽然电脑死机或断电，再打开时，可以看到word提示你恢复到以前的文档。
	核心：
	保存某个对象内部状态的拷贝，这样以后就可以将该对象恢复到原先的状态。
	结构：
	源发器类Originator
	备忘录类Memento
	负责人类CareTake
	开发中常见的应用场景：
	棋类游戏中的悔棋。
	普通软件中的撤销操作。
	数据库软件中的事务管理中的，回滚操作
	Photoshop软件中的，历史记录