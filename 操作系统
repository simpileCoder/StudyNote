1.操作系统有一部分在内存中，其中包括内核程序(kernel)，内核程序包含操作系统中最常使用的功能。内存的其余部分包含用户程序和数据，它的分配由操作系统和处理器中的存储管理硬件联合控制。操作系统决定在程序运行过程中何时使用I/O设备，并控制文件的访问和使用。处理器自身也是一个资源，操作系统必须决定在运行一个特定的用户程序时，可以分配多少处理器时间，在处理器系统中，这个决定要传到所有的处理器。


内存保护：当用户程序正在运行时，不能改变包含监控程序的内存区域。如果试图这样做，处理器硬件将发现错误，并将控制转移给监控程序，监控程序取消这个作业，输出错误信息，并载入下一个作业。

定时器：定时器用于防止一个作业独占系统。在每个作业开始时，设置定时器，如果定时器时间到，用户程序被停止，控制权返回给监控程序。

特权指令：某些机器指令设计成特权指令，只能由监控程序执行。如果处理器在运行一个用户程序时遇到这类指令，则会发生错误，并将控制权转移给监控程序。I/O指令属于特权指令，因此监控程序可以控制所有I/O设备，此外还可以避免用户程序意外地读到下一个作业中的作业控制指令。如果用户程序希望执行I/O，它必须请求监控程序为自己执行这个操作。

中断：早期的计算机模型并没有中断能力。这个特征使得操作系统在让用户程序放弃控制权或从用户程序获得控制权时具有更大的灵活性。


进程控制结构：进程最少必须包括一个或一组被执行的程序，与这些程序相关联的是
局部变量，全局变量和任何已定义常量的数据单元。因此，一个进程至少包括足够的
内存空间，已保存该进程的程序和数据；此外，程序的执行通常涉及用于跟踪过程调
用和过程间参数传递的栈。最后，与每个进程相关联的还有操作系统用于控制进程的
许多属性，通常，属性的集合称做进程控制块(process control block)。
程序，数据，栈和属性的集合称做进程映像(process image)。

创建进程的步骤：
	1.给进程分配一个唯一的进程标识符。此时，在主进程表中增加一个新表项，表
中的没个新表项对应着一个进程。
	2.给进程分配空间。这包括进程映像中的所有元素。因此，操作系统必须知道私
有用户地址空间(程序和数据)和用户栈需要多少空间。可以根据进程的类型使用默认
值，也可以在作业创建时根据用户的请求设置。如果一个进程是由另一个进程生成的
，则父进程可以把所需的值作为进程创建请求的一部分，传递给操作系统。如果任何现有的地址空间被这个新进程共享，则必须建立正确的连接。最后，必须给进程控制
块分配空间。
	3.初始化进程控制块。进程标识符部分包括进程ID和其他相关的ID，如父进程的
ID等；处理器状态信息部分的大多数项目通常初始化成0，除了程序计数器(被置为程
序入口点)和系统栈指针(用来定义进程栈边界)；进程控制信息部分的初始化基于标
准默认值和为该进程所请求的属性。
	4.设置正确的连接。例如，操作系统把每个调度队列都保存成链表，则新进程必
须放置在就绪或就绪/挂起链表中。
	5.创建或扩充其他数据结构。例如，操作系统可能为每个进程保存着一个记账文
件，可用于编制账单或进行性能评估。


进程切换步骤：
	1.保存处理器上下文环境，包括程序计数器和其他寄存器。
	2.更新当前处于运行态进程的进程控制块，包括将进程的状态改变到另一状态(
就绪态，阻塞态，就绪/挂起态或退出态)。还必须更新其他相关域，包括离开运行态
的原因和记账信息。
	3.将进程的进程控制块移到相应的队列(就绪，在事件i处阻塞，就绪/挂起)。
	4.选择另一个进程执行。
	5.更新所选择进程的进程控制块，包括将进程的状态变为运行态。
	6.更新内存管理的数据结构，这取决于如何管理地址转换，这方面的内容将在第
三部分探讨。
	7.恢复处理器在被选择的进程最近一次切换出运行状态时的上下文环境，这可以
通过载入程序计数器和其他寄存器以前的值来实现。


	多线程环境中，进程被定义成资源分配的单位和一个被保护的单位，与进程相关
联的有：
	1.存放进程映像的虚拟地址空间。
	2.受保护地处理器、其他进程(用于进程间通信)、文件和I/O资源(设备和通道)
的访问。

	在一个进程中，可能有一个或多个线程，每个线程有：
	1.线程执行状态(运行、就绪等)。
	2.在未运行时保存的线程上下文；从某种意义上看，线程可以被看做进程内的一
个被独立地操作的程序计数器。
	3.一个执行栈。
	4.用于每个线程局部变量的静态存储空间。
	5.与进程内的其他线程共享的对进程的内存和资源的访问。
	

	线程的有点：
	1.在已有进程中创建一个新的线程比创建一个全新进程所需的时间要少许多。
	2.终止一个线程比终止一个进程花费的时间少。
	3.同一进程内线程间切换比进程间切换花费的时间少。
	4.线程提高了不同的执行程序间通信的效率。


	用户级和内核级线程
	用户级线程：在一个纯粹的用户级线程软件中，有关线程管理的所有工作都由应
用程序完成，内核意识不到线程的存在。
	用户级线程的优点：
	1.由于所有线程管理数据结构都在一个进程的用户地址空间中，线程切换不需要
内核态特权，因此，进程不需要为了线程管理而切换到内核态，这节省了两次状态转
换(从用户态到内核态；再从内核态返回到用户态)的开销。
	2.调度可以是应用程序相关的。一个应用程序可能更适合简单的轮转调度算法，
而另一个应用程序可能更适合基于优先级的调度算法。可以做到为应用程序量身定做
调度算法而不扰乱底层的操作系统调度程序。
	3.用户级线程可以在任何操作系统中运行，不需要对底层内核进行修改以支持用
户级线程。线程库是一组供所有应用程序共享的应用程序级别的函数。


	


